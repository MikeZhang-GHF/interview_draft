{"name": "test_login_fail[standard_user--Epic sadface: Password is required]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: DevToolsActivePort file doesn't exist\nStacktrace:\n0   chromedriver                        0x00000001092982c8 chromedriver + 4752072\n1   chromedriver                        0x0000000109218463 chromedriver + 4228195\n2   chromedriver                        0x0000000108e7bb18 chromedriver + 441112\n3   chromedriver                        0x0000000108ea707f chromedriver + 618623\n4   chromedriver                        0x0000000108ea2ddb chromedriver + 601563\n5   chromedriver                        0x0000000108e9ee3c chromedriver + 585276\n6   chromedriver                        0x0000000108ee1c43 chromedriver + 859203\n7   chromedriver                        0x0000000108ee174f chromedriver + 857935\n8   chromedriver                        0x0000000108ed9b33 chromedriver + 826163\n9   chromedriver                        0x0000000108eaa9fd chromedriver + 633341\n10  chromedriver                        0x0000000108eac051 chromedriver + 639057\n11  chromedriver                        0x000000010926530e chromedriver + 4543246\n12  chromedriver                        0x0000000109269a88 chromedriver + 4561544\n13  chromedriver                        0x00000001092716df chromedriver + 4593375\n14  chromedriver                        0x000000010926a8fa chromedriver + 4565242\n15  chromedriver                        0x00000001092402cf chromedriver + 4391631\n16  chromedriver                        0x00000001092895b8 chromedriver + 4691384\n17  chromedriver                        0x0000000109289739 chromedriver + 4691769\n18  chromedriver                        0x000000010929f81e chromedriver + 4782110\n19  libsystem_pthread.dylib             0x00007ff81b2424e1 _pthread_start + 125\n20  libsystem_pthread.dylib             0x00007ff81b23df6b thread_start + 15", "trace": "@pytest.fixture(scope='session')\n    # @pytest.fixture()  # parallel testing\n    def driver():\n        global get_driver\n>       get_driver = ChromeBrowser().browser\n\ntestcase/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutil/browser.py:97: in browser\n    chrome = self._browser(service=self.service, options=self.options)\n../../../hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py:81: in __init__\n    super().__init__(\n../../../hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py:106: in __init__\n    super().__init__(\n../../../hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:288: in __init__\n    self.start_session(capabilities, browser_profile)\n../../../hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:381: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n../../../hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10d81d9d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: DevToolsActivePort file doesn\\'t...ff81b2424e1 _pthread_start + 125\\\\n20  libsystem_pthread.dylib             0x00007ff81b23df6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: DevToolsActivePort file doesn't exist\nE       Stacktrace:\nE       0   chromedriver                        0x00000001092982c8 chromedriver + 4752072\nE       1   chromedriver                        0x0000000109218463 chromedriver + 4228195\nE       2   chromedriver                        0x0000000108e7bb18 chromedriver + 441112\nE       3   chromedriver                        0x0000000108ea707f chromedriver + 618623\nE       4   chromedriver                        0x0000000108ea2ddb chromedriver + 601563\nE       5   chromedriver                        0x0000000108e9ee3c chromedriver + 585276\nE       6   chromedriver                        0x0000000108ee1c43 chromedriver + 859203\nE       7   chromedriver                        0x0000000108ee174f chromedriver + 857935\nE       8   chromedriver                        0x0000000108ed9b33 chromedriver + 826163\nE       9   chromedriver                        0x0000000108eaa9fd chromedriver + 633341\nE       10  chromedriver                        0x0000000108eac051 chromedriver + 639057\nE       11  chromedriver                        0x000000010926530e chromedriver + 4543246\nE       12  chromedriver                        0x0000000109269a88 chromedriver + 4561544\nE       13  chromedriver                        0x00000001092716df chromedriver + 4593375\nE       14  chromedriver                        0x000000010926a8fa chromedriver + 4565242\nE       15  chromedriver                        0x00000001092402cf chromedriver + 4391631\nE       16  chromedriver                        0x00000001092895b8 chromedriver + 4691384\nE       17  chromedriver                        0x0000000109289739 chromedriver + 4691769\nE       18  chromedriver                        0x000000010929f81e chromedriver + 4782110\nE       19  libsystem_pthread.dylib             0x00007ff81b2424e1 _pthread_start + 125\nE       20  libsystem_pthread.dylib             0x00007ff81b23df6b thread_start + 15\n\n../../../hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:249: WebDriverException"}, "description": "Test failed logins", "parameters": [{"name": "username", "value": "'standard_user'"}, {"name": "password", "value": "''"}, {"name": "expect", "value": "'Epic sadface: Password is required'"}], "start": 1668559552364, "stop": 1668559552364, "uuid": "2a20ab68-2280-43ce-ac8b-aaa53880ea0a", "historyId": "ae84812764109f148dc199996e46a7a6", "testCaseId": "a67639c7d108120b92ca3b258a406cc7", "fullName": "testcase.test_login.TestLogin#test_login_fail", "labels": [{"name": "feature", "value": "Failed Logins"}, {"name": "story", "value": "Test failed logins"}, {"name": "epic", "value": "Login Test"}, {"name": "tag", "value": "login_fail"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "Mac-1668559223907.local"}, {"name": "thread", "value": "2983-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_login"}]}